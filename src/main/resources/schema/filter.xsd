<!--| Copyright - The University of Edinburgh 2015                             |-->
<!--|                                                                          |-->
<!--| Licensed under the Apache License, Version 2.0 (the "License");          |-->
<!--| you may not use this file except in compliance with the License.         |-->
<!--| You may obtain a copy of the License at                                  |-->
<!--|                                                                          |-->
<!--|    http://www.apache.org/licenses/LICENSE-2.0                            |-->
<!--|                                                                          |-->
<!--| Unless required by applicable law or agreed to in writing, software      |-->
<!--| distributed under the License is distributed on an "AS IS" BASIS,        |-->
<!--| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |-->
<!--| See the License for the specific language governing permissions and      |-->
<!--| limitations under the License.                                           |-->
<?xml-stylesheet type="text/xsl" href="../stylesheets/xs3p/xs3p.xsl"?>
<xsd:schema elementFormDefault="qualified"
	targetNamespace="http://safe.epcc.ed.ac.uk/filter"
	xmlns="http://safe.epcc.ed.ac.uk/filter"
 	xmlns:sub="http://safe.epcc.ed.ac.uk/substitute"
	xmlns:par="http://safe.epcc.ed.ac.uk/parameter"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:prop="http://safe.epcc.ed.ac.uk/propexpression" >
	<xsd:import namespace="http://safe.epcc.ed.ac.uk/substitute" 
		schemaLocation="substitute.xsd"/>
	<xsd:import schemaLocation="propexpression.xsd" namespace="http://safe.epcc.ed.ac.uk/propexpression"></xsd:import>
	<xsd:complexType name="PropertyFilterType">
	<xsd:annotation><xsd:documentation>
	Specifies a property expression and corresponding value as part of a filter clause.
	</xsd:documentation></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Property" type="prop:PropExpressionType"
				maxOccurs="1" minOccurs="1" />
			<xsd:choice>
				<xsd:element name="Value" type="prop:PropValueType"
				maxOccurs="1" minOccurs="1" />
				<xsd:element name="Property2" type="prop:PropExpressionType"
				maxOccurs="1" minOccurs="1" />
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
   <xsd:complexType name="DateType">
 		<xsd:annotation><xsd:documentation>
				Elements of this type are used to define an implicit filter based on the current scoped
				reporting period. They define the property or properties in the target record that must match the reporting period.
		</xsd:documentation></xsd:annotation>
		<xsd:choice>
			<xsd:sequence>
			    <xsd:annotation><xsd:documentation>
				This property must be defined and give a result within the period
				</xsd:documentation></xsd:annotation>
				<xsd:element name="Property"
					type="prop:PropExpressionType" minOccurs="1" maxOccurs="1" >
				
				</xsd:element>
			</xsd:sequence>
			<xsd:sequence>
			    <xsd:annotation><xsd:documentation>
				These properties must be defined and bound a period that overlaps the
				target period
				</xsd:documentation></xsd:annotation>
				<xsd:element name="StartProperty"
					type="prop:PropExpressionType" minOccurs="1" maxOccurs="1" />
				<xsd:element name="EndProperty"
					type="prop:PropExpressionType" minOccurs="1" maxOccurs="1" />
				<xsd:element name="NoOverlap" minOccurs="0" maxOccurs="1" >	
				<xsd:annotation><xsd:documentation>Disable overlap calculation even thought there are two time bounds</xsd:documentation></xsd:annotation>
				<xsd:complexType></xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:sequence>
			   <xsd:annotation><xsd:documentation>
					No time filter is generated all records match.
				</xsd:documentation></xsd:annotation>
				<xsd:element name="AllTimes">
					<xsd:complexType>
					</xsd:complexType>
					
				</xsd:element>
			</xsd:sequence>
		</xsd:choice>
	</xsd:complexType>

	<xsd:complexType name="OperationsType">
	<xsd:annotation><xsd:documentation>Composite operation type.
	</xsd:documentation></xsd:annotation>
		<xsd:group ref="Operation" minOccurs="1" maxOccurs="unbounded" />
	</xsd:complexType>

	<xsd:group name="Operation">
	<xsd:annotation><xsd:documentation>
	A single filter clause. The value of the property expression must be in the specified relationship with the associated value.
	</xsd:documentation></xsd:annotation>
	<xsd:choice>
		<xsd:element name="EQ" type="PropertyFilterType" />
		<xsd:element name="NE" type="PropertyFilterType" />
		<xsd:element name="LT" type="PropertyFilterType" />
		<xsd:element name="GT" type="PropertyFilterType" />
		<xsd:element name="LE" type="PropertyFilterType" />
		<xsd:element name="GE" type="PropertyFilterType" />
		<xsd:element name="And" type="OperationsType" />
		<xsd:element name="Or" type="OperationsType" />
		<xsd:element name="Null" type="NullType" />
		<xsd:element name="NotNull" type="NullType" />
		<xsd:element name="Relationship" type="xsd:anyType">
		<xsd:annotation><xsd:documentation>
		Selects any target where the current user has the specified relationship with the target. Note that because
		the relationship syntax can access NamedFilter (and plugin NamedFilterProviders via qualified names) this is 
		a very powerful route to accessing domain specific filters.
		</xsd:documentation></xsd:annotation>
		</xsd:element>
		<xsd:group ref="sub:Content"/>
	</xsd:choice>
	</xsd:group>

	<xsd:complexType name="FilterType">
	<xsd:annotation><xsd:documentation>Selects a set of records from a UsageProducer. The set selected is defined as the AND combination of enclosing and directly nested filter elements
	and an implicit time filter from the reporting period.
	</xsd:documentation></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Producer" type="xsd:string" maxOccurs="1"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Define the usage producer that records should be
						selected from. Defining a producer clears any
						existing filters. Note that a producer may
						consist of multiple tables.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="TimeBounds" type="DateType" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Define the property expressions used to specify the start end end of
						A record. This is used to generate the implicit time period filter.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:group ref="Operation" minOccurs="0"
				maxOccurs="unbounded" />
			<xsd:element maxOccurs="unbounded" minOccurs="0"
				ref="OrderBy">
				
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="TargetType">
		<xsd:sequence>
			<xsd:element name="Target" type="xsd:string" maxOccurs="1"
				minOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Define a set of objects of the same type. Unlike Filter elements this can select any ExpressionTarget type
						and the element is stand-alone a single Target element defines the entire selection.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:group ref="Operation" minOccurs="0"
				maxOccurs="unbounded" />
			<xsd:element maxOccurs="unbounded" minOccurs="0"
				ref="OrderBy">
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:element name="Filter" type="FilterType" />

	<xsd:element name="ObjectSet" type="TargetType" />
	
	<xsd:complexType name="NullType">
		<xsd:sequence>
			<xsd:element name="Property" type="xsd:anyType"
				maxOccurs="1" minOccurs="1">
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="OrderType">
		<xsd:sequence>
			<xsd:element name="Property" type="xsd:anyType"
				maxOccurs="1" minOccurs="1">
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="descending" type="xsd:boolean" default="false" use="optional"></xsd:attribute>
	</xsd:complexType>
	
    <xsd:element name="OrderBy" type="OrderType">
    	<xsd:annotation>
					<xsd:documentation>
						Define an order filter for the selected records.
						This only has an impact if records are being
						processed individually and a limit clause is in
						place. It also only applies on a table by table
						basis so composite usage producers will generate
						multiple ordered sequences.
					</xsd:documentation>
				</xsd:annotation>
    </xsd:element>
</xsd:schema>