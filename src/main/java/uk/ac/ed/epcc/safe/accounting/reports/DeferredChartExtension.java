package uk.ac.ed.epcc.safe.accounting.reports;

import java.io.ByteArrayOutputStream;
import java.text.NumberFormat;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import uk.ac.ed.epcc.webapp.AppContext;
import uk.ac.ed.epcc.webapp.model.data.stream.ByteArrayMimeStreamData;
import uk.ac.ed.epcc.webapp.model.serv.ServeDataProducer;
import uk.ac.ed.epcc.webapp.servlet.ServeDataServlet;
import uk.ac.ed.epcc.webapp.servlet.ServletService;
import uk.ac.ed.epcc.webapp.time.Period;

/** Extension to generate deferred charts.
 * 
 * This generates XML documents corresponding to a individual graphs and stores them so the cart can be 
 * generated by a {@link ServeDataProducer} 
 * 
 * @author Stephen Booth
 *
 */
public class DeferredChartExtension extends ReportExtension {

	public DeferredChartExtension(AppContext conn, NumberFormat nf) throws ParserConfigurationException {
		super(conn, nf);
	}

	
	public DocumentFragment addChart(RecordSet set,Period period,Node n,String caption) {
		
		Document doc = getDocument();
		DocumentFragment result = doc.createDocumentFragment();
		try {
			DocumentFragment spec  = doc.createDocumentFragment();

			// temp for debugging
			spec.appendChild(n);
			
			DeferredChartFactory producer = new DeferredChartFactory(getContext());
			ByteArrayOutputStream res = new ByteArrayOutputStream();
			// write the content into xml file


			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(spec);
			StreamResult out = new StreamResult(res);
			transformer.transform(source, out);
			ByteArrayMimeStreamData msd = new ByteArrayMimeStreamData(res.toByteArray());
			msd.setName("image.png");
			msd.setMimeType(DeferredChartFactory.REPORT_MIME);
			Element e = doc.createElement("Figure");
			result.appendChild(e);
			ServletService serv = conn.getService(ServletService.class);
			if( serv != null){
				e.setAttribute("src", serv.encodeURL(ServeDataServlet.getURL(conn,producer, producer.setData(msd))));
			}else{
				e.setAttribute("src", ServeDataServlet.getURL(conn,producer, producer.setData(msd)));
			}
			e.setAttribute("alt", "figure");
			if( caption != null && caption.trim().length() > 0 ){
				Element c = doc.createElement("Caption");
				c.appendChild(doc.createTextNode(caption));
				e.appendChild(c);
			}
		}catch(Exception e) {
			addError("Bad Plot", "Error adding deferred chart as ServeData link", e);
		}
		
		return result;
	}
}
