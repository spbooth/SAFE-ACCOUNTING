package uk.ac.ed.epcc.safe.accounting.policy;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import uk.ac.ed.epcc.safe.accounting.db.RegexpTarget;
import uk.ac.ed.epcc.safe.accounting.db.RegexpTargetFactory;
import uk.ac.ed.epcc.safe.accounting.properties.PropertyFinder;
import uk.ac.ed.epcc.safe.accounting.properties.PropertyMap;
import uk.ac.ed.epcc.safe.accounting.properties.PropertyTag;
import uk.ac.ed.epcc.safe.accounting.update.AccountingParseException;
import uk.ac.ed.epcc.webapp.AppContext;

/** A policy to invoke a nested parse on a String property generated by the parent parse.
 * 
 * @author spb
 *
 */

public class RegexLinkParsePolicy extends BaseUsageRecordPolicy {
	
	PropertyTag<String> link_prop;
	PropertyTag<Integer> target_prop;
	Map<Integer, Object> target_map = new HashMap();
	
	public RegexLinkParsePolicy() {
	}
	
	@Override
	public PropertyFinder initFinder(AppContext conn, PropertyFinder prev, String table) {
		
		try {
				
			String link_name = conn.getInitParameter("regex_link_parse.link." + table);
			if (null == link_name) {
				throw new AccountingParseException("Error, regex_link_parse.link." + table + " not set.");
			}
			link_prop = (PropertyTag<String>) prev.find(String.class, link_name);
			if (null == link_prop) {
				throw new AccountingParseException("Error, cannot find " + link_name + " property.");
			}
			
			String target_name = conn.getInitParameter("regex_link_parse.target." + table);
			if (null == target_name) {
				throw new AccountingParseException("Error, regex_link_parse.target." + table + " not set.");
			}
			target_prop = (PropertyTag<Integer>) prev.find(Integer.class, target_name);
			if (null == target_prop) {
				throw new AccountingParseException("Error, cannot find " + target_name + " property.");
			}
			
			String target_table = conn.getInitParameter("regex_link_parse.table." + table);
			if (null == target_table) {
				throw new AccountingParseException("Error, regex_link_parse.table." + table + " not set.");
			}	
			
			RegexpTargetFactory rt_fac = new RegexpTargetFactory(conn, target_table);
			Integer rt_key = 1;
			Iterator targets;
			targets = rt_fac.all().iterator();
			while (targets.hasNext()) {
				RegexpTarget rt = (RegexpTarget) targets.next();
				target_map.put(rt_key, rt);
				rt_key++;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return prev;
	}
	
	@Override
	public void parse(PropertyMap rec) throws AccountingParseException {
		
		String link_data = rec.getProperty(link_prop);
		
		Iterator targets = target_map.values().iterator();
		while (targets.hasNext()) {
			RegexpTarget tar = (RegexpTarget) targets.next();
			
			if (link_data.matches(tar.getRegexp().toString())) {
				rec.setProperty(target_prop, tar.getID());
				break;
			}
		}
		
	}
	

}

