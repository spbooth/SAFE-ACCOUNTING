// Copyright - The University of Edinburgh 2011
/*******************************************************************************
 * Copyright (c) - The University of Edinburgh 2010
 *******************************************************************************/
package uk.ac.ed.epcc.safe.accounting.update;

import uk.ac.ed.epcc.safe.accounting.UsageRecord;
import uk.ac.ed.epcc.safe.accounting.properties.PropertyContainer;

/** Policy for augmenting the basic accounting data
 * generated by a UsageRecordParser
 * with additional policy such as derived properties and
 * charges.
 * An accounting scheme may have several policies applied
 * 
 * @author spb
 *
 */
public interface UsageRecordPolicy extends PropertyContainerPolicy{
	

	/**
	 * once record has been committed apply any side effects such as budget
	 * charging.
	 * 
	 * @param props Full set of properties from the parse stage
	 * @param rec   The actual committed record
	 * @throws Exception
	 */
	public void postCreate(PropertyContainer props, UsageRecord rec)
			throws Exception;

	/**
	 * perform any operations required prior to an existing record being
	 * deleted, such as budget refunds. This should be the opposite of {@link #postCreate(PropertyContainer, UsageRecord)}.
	 * 
	 * @param rec
	 * @throws Exception
	 */
	public void preDelete(UsageRecord rec) throws Exception;
   
   
	/** Allow a veto on record replacement
	 * 
	 * @param props new parsed values
	 * @param rec old record
	 * @return boolean
	 */
	public boolean allowReplace(PropertyContainer props, UsageRecord rec);
   
}