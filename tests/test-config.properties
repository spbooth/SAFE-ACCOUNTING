# Copyright - The University of Edinburgh 2015
#
# This file sets the common properties for this service.
# deployment specific properties may be set in deploy-config.properties


# ================
# Service settings
# ================

# The short name of the service used in titles and page text
service.name=WebAcct

# Database able to hold additional configuration properties 
database.properties=Properties
add_properties.webapp=/uk/ac/ed/epcc/webapp/webapp.properties
add_properties.accounting=/uk/ac/ed/epcc/safe/accounting/accounting.default.properties
add_properties.reports=/uk/ac/ed/epcc/safe/accounting/reports/report-builder.default.properties

# =================
# Database settings
# =================
service.feature.use_case_overlap=true
service.feature.auto_create.tables=on
service.feature.auto_cutoff=true
service.feature.use_query_mapper=true

# Either set up a jdbc connection to the database by setting the following 
# values.
#
#    db_name=jdbc:mysql://localhost/webacct
#    db_driver=com.mysql.jdbc.Driver
#    db_username=username
#    db_password=password

# Or configure Webacct to use a database connection pool (DBCP) configured in 
# the application server. 
#

chunksize=8192
# ==============
# Email settings
# ==============

# The domain name of a machine which allows outgoing SMTP traffic
mail.smtp.host=localhost

# The EMAIL address of the administrator to whom questions
# and comments about this application should be addressed.
webmaster=webmaster@example.com

# The name appearing as the sender of general email 
email.from_name=WebAcct Administration

# The email address appearing as the sender of general email 
email.from_address=webacct@example.com

# Location of the email templates
email.template_directory=WEB-INF/email-templates/



# Address for email info
#info.email_notify_address=who@example.com
info.email_from_address=webacct@example.com

# Address for email errors
#error.email_notify_address=who@example.com
error.email_from_address=webacct@example.com

# ===============
# Logger settings
# ===============

# Set the location of the log file
#logdir=/tmp

# Set the name of the log file.
#log4j.appender.H.File=${logdir}/Webacct.log

# To set up the log file to roll daily 
log4j.logger.uk.ac=WARN, H
log4j.appender.H=org.apache.log4j.RollingFileAppender
log4j.appender.H.MaxFileSize=1024KB
log4j.appender.H.MaxBackupIndex=100
log4j.appender.H.layout=org.apache.log4j.PatternLayout

# create database tables as needed
service.feature.auto_create.tables=on

# include standard accounting properties
add_properties.accounting=/uk/ac/ed/epcc/safe/accounting/accounting.default.properties
add_properties.reports=/uk/ac/ed/epcc/safe/accounting/reports/report-builder.default.properties
# register Table transitions
class.Table=uk.ac.ed.epcc.webapp.jdbc.table.TableTransitionProvider


# Command defs
class.ReportGenerator=uk.ac.ed.epcc.safe.apps.ReportGeneratorApp
class.UploadUsageRecord=uk.ac.ed.epcc.safe.apps.UsageRecordUploadApp
#class.WriteUrXML=uk.ac.ed.epcc.safe.apps.UsageRecordWriterFromDBApp
class.XMLGenerator=uk.ac.ed.epcc.safe.apps.XMLGeneratorApp
class.SetProperty=uk.ac.ed.epcc.webapp.apps.SetProperty
class.GetProperty=uk.ac.ed.epcc.webapp.apps.GetProperty
class.AdminForms=uk.ac.ed.epcc.webapp.apps.AdminForms
# ===================
# Accounting settings
# ===================

# The database table which store the details about each user. 
# If the accounting usernames match the login usernames this can be configured as
# a classification table
login-table=Person
class.Person=PersonFactory
class.Machine=Classification
role_list=Admin,ReportDeveloper,UpdateClassifiers,CreateClassifiers,UpdateRelationships
toggle_roles=Admin
# define an admin form for editing classification table entries.
#class.Form=uk.ac.ed.epcc.webacct.model.AdminFormRegistry
class.Classifiers=HeirarchyFormRegistry
root.class.Classifiers=AccountingClassificationFactory
class.Relationships=HeirarchyFormRegistry
root.class.Relationships=Relationship

# define an admin form for editing reports
class.Reports=ConfigFormRegistry
Reports.tables=ReportTemplate
class.ReportTemplate=uk.ac.ed.epcc.safe.accounting.model.ReportTemplateFactory

# list of admin form groups
form.registry.list=Classifiers,Reports,Relationships



# list of accounting tables
#accounting.tables=SGERecord
#aggregate.tables=DailyAggregate

# ValueParser definitions






# ==================
# Reporting settings
# ==================

# The directory where the report template schema are stored.
#




# The database table which stores the overrides the schema, stylesheets or 
# report templates.
#
table.overlay=TextFileOverlay

class.School=AccountingClassificationFactory
class.Institute=AccountingClassificationFactory
properties.SGERecord.School=@NAME(table:Project[Institute[School]])
properties.SGERecord.Institute=@NAME(table:Project[Institute])
# The report chart can plot PlotEntry. The List of PlotEntry which can be 
# plotted is defined by the property 'PlotEntry.list'.
#
#    PlotEntry.list=CPUWait
#
PlotEntry.TotalWall.plot=Wall
PlotEntry.TotalWall.label=Total Wall (secs)
PlotEntry.TotalWall.cumulative=true
PlotEntry.Wall.plot=Wall
PlotEntry.Wall.label=Wall CLock Time (secs)
PlotEntry.JobCount.plot=JobCount
PlotEntry.JobCount.label=Number of Jobs
PlotEntry.list=Time,WaitTime,Count,Wall
PlotEntry.WaitTime.label=CPU*Wait/sec
PlotEntry.WaitTime.plot=CPUWait
PlotEntry.WaitTime.start=SubmittedTimestamp
PlotEntry.WaitTime.end=StartedTimestamp
PlotEntry.WaitTime.scale=0.001
PlotEntry.WaitTime.ratescale.scale=1000
PlotEntry.WaitTime.ratescale.label=CPUs waiting
PlotEntry.WaitTime.ratescale=true
PlotEntry.Time.label=CPU seconds
PlotEntry.Time.plot=Time
PlotEntry.Time.start=StartedTimestamp
PlotEntry.Time.end=CompletedTimestamp
PlotEntry.Time.ratescale.label=CPUs running
PlotEntry.Residency.ratescale=true
PlotEntry.Count.label=Job count
PlotEntry.Count.plot=JobCount
PlotEntry.Count.end=CompletedTimeStamp

GroupEntry.Institute=table:Institute
GroupEntry.Institute.label=Institute
GroupEntry.School=table:School
GroupEntry.School.label=School
# For each of these PlotEntries several properties can be specified. They are 
# defined as PlotEntry.<plot-entry-name>.<property-name>. There are 8 PlotEntry 
# properties which can be specified: 'plot', 'start', 'end', 'label', 'scale', 
# 'ratescale', 'ratescale.scale' and 'ratescale.label'.  They are described in 
#detail below.

# In this example we are using the 'CPUWait' Accounting Property which is the 
# product of the number of CPUs used and the number of milliseconds the job 
# waited in the queue before being started. 

# This defines the numerical Accounting Property that should be plotted on the 
# graph. If this property is not specified then the system will look for an 
# Accounting Property with the same name as the PlotEntry. In this case the 
# default is also CPUWait.
#
#    PlotEntry.CPUWait.plot=CPUWait
#

# This is the default label used to label the quantity being plotted.
#
#    PlotEntry.CPUWait.label=CPU*Wait/sec

# This is scale factor applied to the plot, to convert between different units. 
# For example a value of '0.001', would convert from milliseconds to seconds.
# PlotEntry.CPUWait.scale=0.001

# These are the names of Date values AccountingProperty that define the period 
# of time that the accounting record should be mapped to. If only the 'end' 
# property is defined then the record is mapped to that single point in time. 
# If both 'start' and 'end' are defined then the numerical value is spread 
# evenly across the time period. If no 'end' property is specified then 
# 'CompletedTimestamp?' is used by default.
# 
# In the above example as the Accounting Property relates to, and is 
# proportional to, job wait times we plot the value across the time period when 
# the job was waiting. Note that for efficient plot generation there should be a 
# database index for each of the Date AccountingProperty is that are used in 
# this way.
#
# Plots will be generated more quickly if you only specify the 'end' 
# Accounting Property but may be less informative especially when looking at 
# plots over short periods of time.
#
#    PlotEntry.CPUWait.start=SubmittedTimestamp
#    PlotEntry.CPUWait.end=StartedTimestamp

# When both a 'start' and an 'end' property are specified but you know in 
# advance that difference between these two values will never be greater than a 
# certain period of time you can improve the performance of plot generation by 
# specifying this as a cutoff value. Cutoff values are always in units of 
# milliseconds. This optimisation becomes particularly important when the 
# database table contains a very large number of records.
# 
#    PlotEntry.CPUWait.cutoff=180000000

# A Rate Sclae Plot only makes sense when the value being plotted is 
# proportional to the extent of the period, i.e. both ends of the plot range are 
# specified.
#
# Note, this property only applies when the PlotEntry is plotted as a TimeChart.
#
#    PlotEntry.CPUWait.ratescale=true

# If ratescale is set to true then each value in the plot is divided by the 
# number of milliseconds in each plot period in order to convert the plot value 
# to a rate. 
#
#    PlotEntry.CPUWait.ratescale.scale=1000

# This is a scaling factor that is applied as part of the ratescale 
# transformation. In this example we are removing the conversion from 
# milliseconds to seconds so that the ratescaled plot shows the number of 
# waiting CPUs.
#
#    PlotEntry.CPUWait.ratescale.label=CPU

# Most charts allow you to group the plot values together into sets, for example
# you may plot the Wall time for the machine but group it by project to show how
# much usage there is per project. The types of grouping that can be used are 
# defined using a 'GroupEntry'. The list of possible Groups supported is defined 
# by the property 'GroupEntry.list'
#
#    GroupEntry.list=Project
#
GroupEntry.list=Queue,CPUs,UserName,MachineName

# For each of these GroupEntry several properties can be specified. They are 
# defined as GroupEntry.<group-entry-name>.<property-name>. There are 2 
# GroupEntry properties which can be specified: 'group' and 'labeller'. They are 
# described in detail below.

# This group AccountingProperty used to divide the records into different sets. 
# If this is not defined then the system will look for and AccountingProperty 
# with the same name as the GroupEntry. This is sufficient for most cases so it 
# is often possible to just specify the required AccountingProperty name in the 
# GroupEntry.list
# 
#    GroupEntry.Project.group=ProjectID

# By default the various sets will be labeled using the value of the 'group' 
# AccountingProperty. Optionally it is also possible to define a Labeler class 
# that converts these values into the label string. If multiple 
# AccountingProperty values are mapped to the same label then they will be 
# plotted as a single set. This property gives the name of a java class that 
# implements the uk.ac.ed.epcc.safe.accounting.Labeller interface. 
# 
#    MapperEntry.Project.labeller=uk.ac.hpcx.model.accounting.ProjectLabeller


##ECDF stuff
#
properties.SGERecord.FullName=table:Person[FullName]
properties.SGERecord2.FullName=table:Person[FullName]
#

property.expression.SpecFP=Number
description.expresssion.SpecFP=SpecFP seconds
properties.SGERecord2.SpecFP=(table:Host[SpecFP])*batch:Time
properties.SGERecord.SpecFP=9.0*batch:Time

property.expression.Core2007=Number
description.expression.Core2007=2007 Equivalent core seconds
properties.SGERecord2.Core2007=SpecFP/9.0
properties.SGERecord.Core2007=batch:Time
property.expression.SpecFPHour=Number
description.expression.SpecFPHour=SpecFP hours

properties.SGERecord.SpecFPHour=SpecFP/3600.0
properties.SGERecord2.SpecFPHour=SpecFP/3600.0
classdef.PasswordParser=uk.ac.ed.epcc.safe.accounting.parsers.PasswdParser
class.parser.Person=PasswordParser
reference.SGERecord.ProjectID=Project
reference.SGERecord.GroupID=UnixGroup
reference.SGERecord.MachineID=Machine
reference.SGERecord.PersonID=Person
reference.SGERecord.QueueID=Queue
reference.SGERecord.AccountID=Account
reference.SGERecord.PeID=Pe
accounting.tables=SGERecord
aggregate.tables=DailyAggregate
class.SGERecord=ConfigUsageRecordFactory
class.SGERecord2=ConfigUsageRecordFactory
class.parser.SGERecord=uk.ac.ed.epcc.safe.accounting.parsers.SgeParser
# unique properties used to find duplicate recoreds
#unique-properties.SGERecord=JobID,CompletedTimestamp,Task,PeTaskId
#unique-properties.SGERecord=CompletedTimestamp,Task
# policy classes
policies.SGERecord=ClassificationPolicy,DerivedPropertyPolicy
class.Project=AccountingClassificationFactory
class.UnixGroup=AccountingClassificationFactory
#class.Machine=uk.ac.ed.epcc.webacct.model.MachineFactory
class.Machine=AccountingClassificationFactory
class.Account=AccountingClassificationFactory
class.Queue=AccountingClassificationFactory
class.Pe=AccountingClassificationFactory
classification.SGERecord.MachineName=Machine
classification.SGERecord.Project=Project
classification.SGERecord.GroupName=UnixGroup
classification.SGERecord.Account=Account
classification.SGERecord.PE=Pe
classification.SGERecord.Queue=Queue
classification.SGERecord.UserName=Person
reference.SGERecord.ProjectID=Project
reference.SGERecord.PeID=Pe
reference.SGERecord.AccountID=Account
reference.SGERecord.QueueID=Queue
reference.SGERecord.MachineID=Machine
reference.SGERecord.GroupID=UnixGroup
reference.Project.InstituteID=Institute
reference.Person.InstituteID=Institute
reference.Institute.SchoolID=School
master.DailyAggregate=SGERecord
class.DailyAggregate=DailyAggregateUsageRecordFactory
reference.DailyAggregate.MachineID=Machine
reference.DailyAggregate.ProjectID=Project
reference.DailyAggregate.GroupID=UnixGroup
reference.DailyAggregate.PersonID=Person
reference.DailyAggregate.QueueID=Queue
reference.DailyAggregate.PeID=Pe
aggregate.tables=DailyAggregate
#class.Globus=ConfigUsageRecordFactory
#class.parser.Globus=GlobusParser
class.parser.VomsAccounting=VomsParser
GlobusJobmanagerParser.Globus.pbs=PBSRecord
class.parser.PBSRecord=PbsParser
class.PBSRecord=ConfigUsageRecordFactory
policies.PBSRecord=GridPropertyPolicy,ExpressionPropertyPolicy
GridPropertyPolicy.PBSRecord.globus=Globus
#properties.PBSRecord.Vo=Globus[VomsAccounting[VO0]]
#properties.PBSRecord.SubmittedSeconds=SubmittedTimestamp/1000
create_table.PBSRecord.MachineName=string128
create_table.PBSRecord.Inserted=date
create_table.PBSRecord.Text=string1024
class.parser.LSFRecord=LSFParser
class.LSFRecord=ConfigUsageRecordFactory
# NGS use a different schema
class.parser.NGSRecord=NGSXMLRecordParser
class.NGSRecord=ConfigUsageRecordFactory
class.parser.BudgetRecord=uk.ac.ed.epcc.safe.accounting.parsers.DEISAXMLProjectBudgetParser
class.BudgetRecord=ConfigUsageRecordFactory
class.parser.AggregateRecord=uk.ac.ed.epcc.safe.accounting.parsers.DeisaXMLRecordParser
class.AggregateRecord=ConfigUsageRecordFactory
class.parser.OGFURecord=OGFXMLRecordParser
class.OGFURecord=ConfigUsageRecordFactory
class.parser.SLURMRecord=DiracSLURMParser
class.SLURMRecord=ConfigUsageRecordFactory
class.Globus=ConfigUsageRecordFactory
#class.ServeDataChartExtension=uk.ac.ed.epcc.safe.accounting.reports.CommandLineImageExtension
class.DailyAggregate=DailyAggregateUsageRecordFactory
master.DailyAggregate=SGERecord
master.AggregationSet=SGERecord
aggregation.group.DailyAggregate=AggregationSet
reference.DailyAggregate.MachineID=Machine
reference.DailyAggregate.ProjectID=Project
reference.DailyAggregate.GroupID=UnixGroup
reference.DailyAggregate.PersonID=Person
reference.DailyAggregate.QueueID=Queue
reference.DailyAggregate.PeID=Pe
class.parser.Person=PasswdParser    
class.Passwd=ClassificationUpload
Passwd.target=Person
Person.match=Username